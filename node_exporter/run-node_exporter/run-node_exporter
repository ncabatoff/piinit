#!/bin/bash
# This script is used to configure and run node_exporter.

set -e

readonly SUPERVISOR_CONFIG_PATH="/etc/supervisor/conf.d/run-node_exporter.conf"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-node_exporter [OPTIONS]"
  echo
  echo "This script is used to configure and run node_exporter."
  echo
  echo "Options:"
  echo
  echo -e "  --config-dir\t\tThe path to the node_exporter config folder. Optional. Default is the absolute path of '../config', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with node_exporter binary. Optional. Default is the absolute path of the parent folder of this script."
  echo -e "  --log-dir\t\tThe path to the node_exporter log folder. Optional. Default is the absolute path of '../log', relative to this script."
  echo -e "  --user\t\tThe user to run node_exporter as. Optional. Default is to use the owner of --config-dir."
  echo -e "  --use-sudo\t\tIf set, run the node_exporter agent with sudo. By default, sudo is only used if --client is set."
  echo -e "  --environment\t\A single environment variable in the key/value pair form 'KEY=\"val\"' to pass to node_exporter as environment variable when starting it up. Repeat this option for additional variables. Optional."
  echo
  echo "Example:"
  echo
  echo "  run-node_exporter --config-dir /custom/path/to/node_exporter/config"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

# Based on code from: http://stackoverflow.com/a/16623897/483528
function strip_prefix {
  local readonly str="$1"
  local readonly prefix="$2"
  echo "${str#$prefix}"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

# Based on https://stackoverflow.com/a/17841619
function join_by {
  local IFS="$1"
  shift
  echo "$*"
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function generate_supervisor_config {
  local readonly supervisor_config_path="$1"
  local readonly node_exporter_config_dir="$2"
  local readonly node_exporter_bin_dir="$3"
  local readonly node_exporter_log_dir="$4"
  local readonly node_exporter_user="$5"
  local readonly use_sudo="$6"
  shift 6
  local readonly environment=("$@")

  if [[ "$use_sudo" == "true" ]]; then
    log_info "The --use-sudo flag is set, so running node_exporter as the root user"
    node_exporter_user="root"
  fi

  log_info "Creating Supervisor config file to run node_exporter in $supervisor_config_path"
  cat > "$supervisor_config_path" <<EOF
[program:node_exporter]
command=$node_exporter_bin_dir/node_exporter --collector.textfile.directory=$node_exporter_config_dir
stdout_logfile=$node_exporter_log_dir/node_exporter-stdout.log
stderr_logfile=$node_exporter_log_dir/node_exporter-error.log
numprocs=1
autostart=true
autorestart=true
stopsignal=INT
user=$node_exporter_user
environment=$(join_by "," "${environment[@]}")
EOF
}

function start_node_exporter {
  log_info "Reloading Supervisor config and starting node_exporter"
  supervisorctl reread
  supervisorctl update
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local readonly path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function run {
  local config_dir=""
  local bin_dir=""
  local log_dir=""
  local user=""
  local use_sudo=""
  local environment=()
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --log-dir)
        assert_not_empty "$key" "$2"
        log_dir="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --cluster-tag-key)
        assert_not_empty "$key" "$2"
        cluster_tag_key="$2"
        shift
        ;;
      --cluster-tag-value)
        assert_not_empty "$key" "$2"
        cluster_tag_value="$2"
        shift
        ;;
      --use-sudo)
        use_sudo="true"
        ;;
      --environment)
        assert_not_empty "$key" "$2"
        environment+=("$2")
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ -z "$use_sudo" ]]; then
    if [[ "$client" == "true" ]]; then
      use_sudo="true"
    else
      use_sudo="false"
    fi
  fi

  assert_is_installed "supervisorctl"
  assert_is_installed "curl"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  if [[ -z "$log_dir" ]]; then
    log_dir=$(cd "$SCRIPT_DIR/../log" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi


  generate_supervisor_config "$SUPERVISOR_CONFIG_PATH" "$config_dir" "$bin_dir" "$log_dir" "$user" "$use_sudo" "${environment[@]}"
  start_node_exporter
}

run "$@"
