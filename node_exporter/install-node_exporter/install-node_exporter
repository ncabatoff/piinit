#!/bin/bash
# This script can be used to install node_exporter.

set -e

readonly DEFAULT_INSTALL_PATH="/opt/prometheus"
readonly DEFAULT_NODE_EXPORTER_USER="node_exporter"
readonly DEFAULT_ARCH="linux-amd64"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SYSTEM_BIN_DIR="/usr/local/bin"

readonly SUPERVISOR_DIR="/etc/supervisor"
readonly SUPERVISOR_CONF_DIR="$SUPERVISOR_DIR/conf.d"

readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: install-node_exporter [OPTIONS]"
  echo
  echo "This script can be used to install node_exporter and its dependencies. This script has been tested with Ubuntu 16.04 and Amazon Linux."
  echo
  echo "Options:"
  echo
  echo -e "  --version\t\tThe version of node_exporter to install. Required."
  echo -e "  --path\t\tThe path where node_exporter should be installed. Optional. Default: $DEFAULT_INSTALL_PATH."
  echo -e "  --user\t\tThe user who will own the node_exporter install directories. Optional. Default: $DEFAULT_NODE_EXPORTER_USER."
  echo -e "  --arch\t\tThe arch for the binary. Optional. Default: $DEFAULT_ARCH."
  echo
  echo "Example:"
  echo
  echo "  install-node_exporter --version 0.17.0"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

# Install steps are based on: http://unix.stackexchange.com/a/291098/215969
function install_supervisord_debian {
  sudo apt-get install -y supervisor
  sudo update-rc.d supervisor defaults

  create_supervisor_config
  sudo systemctl enable supervisor
}

# Install steps are based on: http://stackoverflow.com/a/31576473/483528
function install_supervisord_amazon_linux {
  sudo pip install supervisor

  # On Amazon Linux, /usr/local/bin is not in PATH for the root user, so we add symlinks to /usr/bin, which is in PATH
  if [[ ! -f "/usr/bin/supervisorctl" ]]; then
    sudo ln -s /usr/local/bin/supervisorctl /usr/bin/supervisorctl
  fi
  if [[ ! -f "/usr/bin/supervisord" ]]; then
    sudo ln -s /usr/local/bin/supervisord /usr/bin/supervisord
  fi

  sudo cp "$SCRIPT_DIR/supervisor-initd-script.sh" "/etc/init.d/supervisor"
  sudo chmod a+x /etc/init.d/supervisor
  sudo mkdir -p /var/log/supervisor

  create_supervisor_config
  sudo chkconfig --add supervisor
  sudo chkconfig supervisor on
}

function create_supervisor_config {
  sudo mkdir -p "$SUPERVISOR_CONF_DIR"
  sudo cp "$SCRIPT_DIR/supervisord.conf" "$SUPERVISOR_DIR/supervisord.conf"
}

function has_yum {
  [ -n "$(command -v yum)" ]
}

function has_apt_get {
  [ -n "$(command -v apt-get)" ]
}

function install_dependencies {
  log_info "Installing dependencies"

  if $(has_apt_get); then
    sudo apt-get update -y
    sudo apt-get install -y curl
    install_supervisord_debian
  elif $(has_yum); then
    sudo yum update -y
    sudo yum install -y curl
    install_supervisord_amazon_linux
  else
    log_error "Could not find apt-get or yum. Cannot install dependencies on this OS."
    exit 1
  fi
}

function user_exists {
  local readonly username="$1"
  id "$username" >/dev/null 2>&1
}

function create_node_exporter_user {
  local readonly username="$1"

  if $(user_exists "$username"); then
    echo "User $username already exists. Will not create again."
  else
    log_info "Creating user named $username"
    sudo useradd "$username"
  fi
}

function create_node_exporter_install_paths {
  local readonly path="$1"
  local readonly username="$2"

  log_info "Creating install dirs for node_exporter at $path"
  sudo mkdir -p "$path"
  sudo mkdir -p "$path/bin"
  sudo mkdir -p "$path/config"
  sudo mkdir -p "$path/log"

  log_info "Changing ownership of $path to $username"
  sudo chown -R "$username:$username" "$path"
}

function install_binaries {
  local readonly version="$1"
  local readonly path="$2"
  local readonly username="$3"
  local readonly arch="$4"

  local readonly url="https://github.com/prometheus/node_exporter/releases/download/v${version}/node_exporter-${version}.${arch}.tar.gz"
  local readonly download_path="/tmp/node_exporter_${version}_${arch}.tar.gz"
  local readonly bin_dir="$path/bin"
  local readonly node_exporter_dest_path="$bin_dir/node_exporter"
  local readonly run_node_exporter_dest_path="$bin_dir/run-node_exporter"

  log_info "Downloading node_exporter $version from $url to $download_path"
  curl -Lo "$download_path" "$url"
  tar zxfC "$download_path" /tmp

  log_info "Moving node_exporter binary to $node_exporter_dest_path"
  sudo mv "/tmp/node_exporter-${version}.${arch}/node_exporter" "$node_exporter_dest_path"
  sudo chown "$username:$username" "$node_exporter_dest_path"
  sudo chmod a+x "$node_exporter_dest_path"

  local readonly symlink_path="$SYSTEM_BIN_DIR/node_exporter"
  if [[ -f "$symlink_path" ]]; then
    log_info "Symlink $symlink_path already exists. Will not add again."
  else
    log_info "Adding symlink to $node_exporter_dest_path in $symlink_path"
    sudo ln -s "$node_exporter_dest_path" "$symlink_path"
  fi

  log_info "Copying node_exporter run script to $run_node_exporter_dest_path"
  sudo cp "$SCRIPT_DIR/../run-node_exporter/run-node_exporter" "$run_node_exporter_dest_path"
  sudo chown "$username:$username" "$run_node_exporter_dest_path"
  sudo chmod a+x "$run_node_exporter_dest_path"
}

function install {
  local version=""
  local path="$DEFAULT_INSTALL_PATH"
  local user="$DEFAULT_NODE_EXPORTER_USER"
  local arch="$DEFAULT_ARCH"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --version)
        version="$2"
        shift
        ;;
      --path)
        path="$2"
        shift
        ;;
      --user)
        user="$2"
        shift
        ;;
      --arch)
        arch="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--version" "$version"
  assert_not_empty "--path" "$path"
  assert_not_empty "--user" "$user"
  assert_not_empty "--arch" "$arch"

  log_info "Starting node_exporter install"

  install_dependencies
  create_node_exporter_user "$user"
  create_node_exporter_install_paths "$path" "$user"
  install_binaries "$version" "$path" "$user" "$arch"

  log_info "node_exporter install complete!"
}

install "$@"